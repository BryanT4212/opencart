{{ header }}{{ column_left }}
<div id="content">
  <div class="page-header">
    <div class="container-fluid">
      <h1>{{ heading_title }}</h1>
      <ol class="breadcrumb">
        {% for breadcrumb in breadcrumbs %}
          <li class="breadcrumb-item"><a href="{{ breadcrumb.href }}">{{ breadcrumb.text }}</a></li>
        {% endfor %}
      </ol>
    </div>
  </div>
  <div class="container-fluid">
    <div class="card">
      <div class="card-header"><i class="fa-solid fa-puzzle-piece"></i> {{ text_list }}</div>
      <div class="card-body">
        <fieldset>
          <legend>{{ text_type }}</legend>
          <div class="card bg-light">
            <div class="card-body">
              <div class="input-group">
                <select name="type" id="input-type" class="form-select">
                  {% for category in categories %}
                    <option value="{{ category.href }}"{% if type == category.code %} selected{% endif %}>{{ category.text }}</option>
                  {% endfor %}
                </select>
                <div class="input-group-text"><i class="fa-solid fa-filter"></i>&nbsp;{{ text_filter }}</div>
              </div>
            </div>
          </div>
        </fieldset>
        <div id="extension">{{ extension }}</div>
      </div>
    </div>
  </div>
</div>
<script type="text/javascript"><!--
// Register handler to update the extensions display when a type is chosen
$('#input-type').on('change', function () {
    $.ajax({
        url: $(this).val(),
        dataType: 'html',
        beforeSend: function () {
            $('.fa-filter').addClass('fa-circle-notch fa-spin');
            $('.fa-filter').removeClass('fa-filter');
            $('#input-type').prop('disabled', true);
        },
        complete: function () {
            $('.fa-circle-notch').addClass('fa-filter');
            $('.fa-circle-notch').removeClass('fa-circle-notch fa-spin');
            $('#input-type').prop('disabled', false);
        },
        success: function (html) {
            $('#extension').html(html);
        },
        error: function (xhr, ajaxOptions, thrownError) {
            console.log(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
        }
    });
});

// Register handler to respond when the Download & Install button for a given
// extension is clicked 
$('#extension').on('click', '#recommended .btn-primary', function (e) {
    e.preventDefault();

    var element = this;

    $.ajax({
        url: $(element).attr('value'),
        dataType: 'json',
        beforeSend: function () {
            $(element).button('loading');
        },
        complete: function () {
            $(element).button('reset');
        },
        success: function (json) {
            $('.alert-dismissible').remove();

            if (json['error']) {
                $('#extension').before('<div class="alert alert-danger alert-dismissible"><i class="fa-solid fa-circle-exclamation"></i> ' + json['error'] + ' <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div></div>');
            }

            if (json['success']) {
                $('#extension').before('<div class="alert alert-success alert-dismissible"><i class="fa-solid fa-check-circle"></i> ' + json['success'] + '  <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>');

              // We have an extension_install_id now so update dropdown items
              $(element).siblings('.dropdown-menu').find('.dropdown-item').attr('href', function( index, url ) { return url.replace('{extension_install_id}', json['extension_install_id']); });

              // Update the extension state to downloaded
              $(element).closest('.btn-group').removeClass('oc-extension-not-installed oc-extension-downloaded oc-extension-installed oc-extension-activated').addClass('oc-extension-downloaded');

              // Auto-install
              $(element).siblings('.dropdown-menu').find('.dropdown-item.oc-extension-install').trigger('click');
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            console.log(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);

            $(element).button('reset');
        }
    });
});

 /**
  * Handle the response from the recommended extension installer API
  *
  * @param object dropdown_item  DOM element representing the button clicked
  *                              on to initiate the API call
  *
  * @oaram string api_call       URL of the API function to be invoked
  *
  * @return void
  */
 function recommended_extension_action (dropdown_item, api_call) {
   $.ajax({
     url: api_call,
     dataType: 'json',
     success: function (json) {
       $('.alert-dismissible').remove();

       if (json['error']) {
         $('#extension').before('<div class="alert alert-danger alert-dismissible"><i class="fa-solid fa-circle-exclamation"></i> ' + json['error'] + ' <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div></div>');
       } else if (json['success']) {
         $('#extension').before('<div class="alert alert-success alert-dismissible"><i class="fa-solid fa-check-circle"></i> ' + json['success'] + '  <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>');

         // Update the extension state now that the API call is complete
         new_status = '';
         if (json['status']) {
           new_status = json['status'];
         } else if (json['extension_install_id']) {
           new_status = 'oc-extension-downloaded';
         }

         if (new_status) {
           $(dropdown_item).closest('.btn-group').removeClass('oc-extension-not-installed oc-extension-downloaded oc-extension-installed oc-extension-activated').addClass(new_status);
         }

         // Update the extension display
         $('#input-type').trigger('change');
       } else if (json['next']) {
         // API continuation
         recommended_extension_action(dropdown_item, json['next']);
       } else {
         console.log( 'Unrecognized response: ' + json + ' received from ' + api_call );
       }
     },
     error: function (xhr, ajaxOptions, thrownError) {
       console.log(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
     }
   });
 }
 
 // Register handler to respond to an item on a dropdown menu being clicked
 $('#extension').on('click', '.dropdown-item', function (e) {
   e.preventDefault();

   var element = this;

   recommended_extension_action(element, $(element).attr('href'));
 });

// Register handler to respond when the activate button of a given extension is
// clicked 
$('#extension').on('click', '.btn-success', function (e) {
    e.preventDefault();

    var element = this;

    $.ajax({
        url: $(element).attr('href'),
        dataType: 'json',
        beforeSend: function () {
            $(element).button('loading');
        },
        complete: function () {
            $(element).button('loading');
        },
        success: function (json) {
            $('.alert-dismissible').remove();

            if (json['error']) {
                $('#alert').prepend('<div class="alert alert-danger alert-dismissible"><i class="fa-solid fa-circle-exclamation"></i> ' + json['error'] + ' <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>');
            }

            if (json['success']) {
                $('#alert').prepend('<div class="alert alert-success alert-dismissible"><i class="fa-solid fa-check-circle"></i> ' + json['success'] + ' <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>');

                // Update the extension state to installed
                $(element).parent().find('.btn-group').removeClass('oc-extension-not-installed oc-extension-downloaded oc-extension-installed oc-extension-activated').addClass('oc-extension-installed');
              
                $('#input-type').trigger('change');
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            console.log(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
        }
    });
});

// Register handler to respond when the deactivate button of a given extension
// is clicked 
$('#extension').on('click', '.btn-danger, .btn-outline-danger', function (e) {
    e.preventDefault();

    if (confirm('{{ text_confirm }}')) {
        var element = this;

        $.ajax({
            url: $(element).attr('href'),
            dataType: 'json',
            beforeSend: function () {
                $(element).button('loading');
            },
            complete: function () {
                $(element).button('reset');
            },
            success: function (json) {
                $('.alert-dismissible').remove();

                if (json['error']) {
                    $('#alert').prepend('<div class="alert alert-danger alert-dismissible"><i class="fa-solid fa-circle-exclamation"></i> ' + json['error'] + ' <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>');
                }

                if (json['success']) {
                    $('#alert').prepend('<div class="alert alert-success alert-dismissible"><i class="fa-solid fa-check-circle"></i> ' + json['success'] + ' <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>');

                    $('#input-type').trigger('change');
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
            }
        });
    }
});
//--></script>
{{ footer }}
